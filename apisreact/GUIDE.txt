API's React

In this case, it'll use the own react system for connecting an API.

1. Import a useState hook.
    import { useState, useEffect } from "react";

2. Create a useState const:
    const [data, setData] = useState(null);

3. Use a useEffect which it allows us to call a HTTP permisson.
    useEffect(() => {
        fetch("https://jsonplaceholder.typicode.com/users")
        .then((response) => response.json()) //back a promisse
        .then((data) => setData(data)); // back the data
    }, []);

4. Inside of our main return, we have to back these datas:
    <ul>
        {data?.map((user) => (<li key={user.id}>{user.name}</li>
        ))}
    </ul>

OTHER WAY TO USE AN API
1. To avoid creating or modifying different times an api, we need to create a new file:
    useFetch.js
This file is a custome hook.

2. Copy from the const to useEffect hook inside in a export function useFecth():
    import { useState, useEffect } from "react";
    export function useEffect() {
        const [data, setData] = useState(null);
        useEffect(() => {
            fetch("https://jsonplaceholder.typicode.com/users")
                .then((response) => response.json()) //back a promisse
                .then((data) => setData(data)); // back the data
        }, []);
    }

ENDPOINT WITH URL

1. Call a function with a parameter:

    import { useState, useEffect } from "react";

    export function useEffect(url) {
        const [data, setData] = useState(null);
        useEffect(() => {
            fetch(url)
                .then((response) => response.json()) //back a promisse
                .then((data) => setData(data)); // back the data
        }, []);

        return { data };
    }

//////////////////////////////////////////////////////////////////
LOADING SYSTEM 

1. Crate a new const:
     const [loading, setLoading] = useState(true);

2. Inside useEffect, we can put the useState(true) again, only for checking that all is correct:

    useEffect(() => {
        setLoading(true);
        fetch(url)
            .then((response) => response.json())
            .then((data) => 
                setLoading(false); //return false for finishing the process
                setData(data));
    }, []);

    OR 

    useEffect(() => {
    fetch(url)
        .then((response) => response.json())
        .then((data) => setData(data));
        .finally(() => setLoading(false));
    }, []);

    return { data, loading };

////////////////////////////////////////////////////////////////////
Show an error messsage

We can create a code where shows to users if exists a mistake when the page loads.

1. Creat another const:
    const [error, setError] = useState(null);

2. Inside the useEffect, put a .catch (this receive the error):

    .catch((error) => setError(error))

3. Return the error.

    return { data, loading, error };

/////////////////////////////////////////////////////////////////////
Cancel the request

Imagine if you need to cancel the request because the user doesn't want to continue with your platform
or a service. You can cancel it with a button or if the user go out of your window.

1. Call the class AbortController that allows you to abort one or more Web requests as and when desired. 
Put it inside of useEffect:

    const abortController = new AbortController();

2. Inside of fecth():

    fetch(url, { signal: abortController.signal });

3. Return abortController.abort(). This'll execute when the component has been unmounted.
(When a component isn't visible in the screen)

    return () => abortController.abort();

This part avoid memory leaks

OTHER WAY

1. Declare a const at the beginning of the code
    const [controller, setController] = useState(null);

2. Inside of the useEffect, after the const abortController:
    setController(abortController)

3. Outside and after of useEffect, create a const handleCancelRequest:
    const handleCancelRequest = () => {
        if(controller){
            abortController.abort();
            setError("Request Cancelled");
        }    
    }
